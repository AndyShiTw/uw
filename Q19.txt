因應高併發的狀況

#1 將DB設計為讀寫分離，盡量減少主要DB的乘載量
#2 透過Redis，將公共化的訊息儲存，減少對DB的讀取量
#3 避免O(n^2)的程式碼，盡量避免重複的Query執行
#4 透過AWS的auto scaling，將流量分散至多台API系統
#5 利用JWT降低Server的壓力
#6 定期將DB的冷資料移出，降低DB的乘載量
#7 利用Queue和Crond，將重要但不需要即時的訊息，分散到背景處理，例如統計報表、新增文章
